generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Modeling

model Order {
  id                  Int           @id @default(autoincrement())
  orderNumber         String        @unique
  pickupLocation      String
  pickupLocationName  String
  dropoffLocation     String
  dropoffLocationName String
  pickupDate          DateTime
  dropoffDate         DateTime?
  status              OrderStatus   @default(PENDING)
  phoneNumber         String
  payment             Int
  truckCategoryId     Int
  truckCategory       TruckCategory @relation(fields: [truckCategoryId], references: [id])
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model Pricing {
  id              Int           @id @default(autoincrement())
  basePrice       Float
  distance        Float
  weight          Float
  elevationFactor Float?
  truckId         Int
  truck           TruckCategory @relation(fields: [truckId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model TruckCategory {
  id       Int        @id @default(autoincrement())
  name     String
  weight   Int
  imageUrl String
  capacity Int
  length   Float
  width    Float
  height   Float
  prices   Pricing[]
  orders   Order[] // Order modeli ilə əlaqə
  location Location[]
  drivers   Driver[]
}
enum Role {
  ADMIN
  DRIVER
  SHIPPER
}

enum Degree {
  DEGREE_1
  DEGREE_2
  DEGREE_3
  DEGREE_4
  DEGREE_5
  DEGREE_6
  DEGREE_7
}

model Account {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role     @default(SHIPPER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Account ilə yalnız bir Driver əlaqəsi
  driver    Driver?  @relation("AccountToDriver", fields: [driverId], references: [id])
  driverId  Int?     @unique

  @@map("accounts")
}

model Driver {
  id              Int           @id @default(autoincrement())
  name            String
  phoneNumber     String        @unique
  licenseNumber   String
  truckCategoryId Int           // TruckCategory modelinə xarici açar
  degree          Degree        @default(DEGREE_1)
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Driver ilə əlaqəli Account
  account         Account?      @relation("AccountToDriver")

  // TruckCategory ilə əlaqə
  truckCategory   TruckCategory @relation(fields: [truckCategoryId], references: [id])

  @@map("drivers")
}

model Location {
  id          Int           @id @default(autoincrement())
  name        String
  maxDistance Float
  price       Float
  startLat    Float
  startLng    Float
  endLat      Float
  endLng      Float
  direction   Int
  truckId     Int
  truck       TruckCategory @relation(fields: [truckId], references: [id])
}
